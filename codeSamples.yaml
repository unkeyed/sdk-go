overlay: 1.0.0
info:
  title: CodeSamples overlay for go target
  version: 0.0.0
actions:
  - target: $["paths"]["/v1/keys.verifyKey"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "verifyKey"
          "source": "package main\n\nimport(\n\t\"github.com/unkeyed/sdk-go/models/components\"\n\tsdkgo \"github.com/unkeyed/sdk-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := sdkgo.New(\n        sdkgo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := components.V1KeysVerifyKeyRequest{\n        APIID: sdkgo.String(\"api_1234\"),\n        Key: \"sk_1234\",\n        Authorization: &components.Authorization{\n            Permissions: &components.Permissions{},\n        },\n    }\n    \n    ctx := context.Background()\n    res, err := s.V1KeysVerifyKey(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/keys.updateKey"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "updateKey"
          "source": "package main\n\nimport(\n\t\"github.com/unkeyed/sdk-go/models/components\"\n\tsdkgo \"github.com/unkeyed/sdk-go\"\n\t\"github.com/unkeyed/sdk-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := sdkgo.New(\n        sdkgo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := operations.V1KeysUpdateKeyRequestBody{\n        KeyID: \"key_123\",\n        Name: sdkgo.String(\"Customer X\"),\n        OwnerID: sdkgo.String(\"user_123\"),\n        Meta: map[string]interface{}{\n            \"roles\": \"<value>\",\n            \"stripeCustomerId\": \"cus_1234\",\n        },\n        Expires: sdkgo.Float64(0),\n        Ratelimit: &operations.V1KeysUpdateKeyRatelimit{\n            Type: operations.V1KeysUpdateKeyTypeFast,\n            Limit: 10,\n            RefillRate: 1,\n            RefillInterval: 60,\n        },\n        Remaining: sdkgo.Float64(1000),\n        Refill: &operations.V1KeysUpdateKeyRefill{\n            Interval: operations.V1KeysUpdateKeyIntervalDaily,\n            Amount: 100,\n        },\n        Enabled: sdkgo.Bool(true),\n    }\n    \n    ctx := context.Background()\n    res, err := s.V1KeysUpdateKey(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/keys.getVerifications"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "getVerifications"
          "source": "package main\n\nimport(\n\t\"github.com/unkeyed/sdk-go/models/components\"\n\tsdkgo \"github.com/unkeyed/sdk-go\"\n\t\"github.com/unkeyed/sdk-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := sdkgo.New(\n        sdkgo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := operations.V1KeysGetVerificationsRequest{\n        KeyID: sdkgo.String(\"key_1234\"),\n        OwnerID: sdkgo.String(\"chronark\"),\n        Start: sdkgo.Int64(1620000000000),\n        End: sdkgo.Int64(1620000000000),\n        Granularity: operations.GranularityDay.ToPointer(),\n    }\n    \n    ctx := context.Background()\n    res, err := s.V1KeysGetVerifications(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/ratelimits.limit"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "limit"
          "source": "package main\n\nimport(\n\t\"github.com/unkeyed/sdk-go/models/components\"\n\tsdkgo \"github.com/unkeyed/sdk-go\"\n\t\"github.com/unkeyed/sdk-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := sdkgo.New(\n        sdkgo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := operations.V1RatelimitsLimitRequestBody{\n        Namespace: sdkgo.String(\"email.outbound\"),\n        Identifier: \"user_123\",\n        Limit: 10,\n        Duration: 60000,\n        Cost: sdkgo.Int64(2),\n        Resources: []operations.Resources{\n            operations.Resources{\n                Type: \"project\",\n                ID: \"p_123\",\n                Name: sdkgo.String(\"dub\"),\n            },\n        },\n    }\n    \n    ctx := context.Background()\n    res, err := s.V1RatelimitsLimit(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/migrations.createKeys"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "createKeys"
          "source": "package main\n\nimport(\n\t\"github.com/unkeyed/sdk-go/models/components\"\n\tsdkgo \"github.com/unkeyed/sdk-go\"\n\t\"github.com/unkeyed/sdk-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := sdkgo.New(\n        sdkgo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := []operations.RequestBody{\n        operations.RequestBody{\n            APIID: \"api_123\",\n            Name: sdkgo.String(\"my key\"),\n            Hash: operations.Hash{\n                Value: \"<value>\",\n                Variant: operations.VariantSha256Base64,\n            },\n            Start: sdkgo.String(\"unkey_32kq\"),\n            OwnerID: sdkgo.String(\"team_123\"),\n            Meta: map[string]interface{}{\n                \"billingTier\": \"PRO\",\n                \"trialEnds\": \"2023-06-16T17:16:37.161Z\",\n            },\n            Roles: []string{\n                \"admin\",\n                \"finance\",\n            },\n            Expires: sdkgo.Int64(1623869797161),\n            Remaining: sdkgo.Int64(1000),\n            Refill: &operations.V1MigrationsCreateKeysRefill{\n                Interval: operations.V1MigrationsCreateKeysIntervalDaily,\n                Amount: 100,\n            },\n            Ratelimit: &operations.V1MigrationsCreateKeysRatelimit{\n                Type: operations.V1MigrationsCreateKeysTypeFast.ToPointer(),\n                Limit: 10,\n                RefillRate: 1,\n                RefillInterval: 60,\n            },\n            Enabled: sdkgo.Bool(false),\n        },\n    }\n    \n    ctx := context.Background()\n    res, err := s.V1MigrationsCreateKeys(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/keys/verify"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "post_/v1/keys/verify"
          "source": "package main\n\nimport(\n\t\"github.com/unkeyed/sdk-go/models/components\"\n\tsdkgo \"github.com/unkeyed/sdk-go\"\n\t\"github.com/unkeyed/sdk-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := sdkgo.New(\n        sdkgo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := operations.PostV1KeysVerifyRequestBody{\n        APIID: sdkgo.String(\"api_1234\"),\n        Key: \"sk_1234\",\n    }\n    \n    ctx := context.Background()\n    res, err := s.PostV1KeysVerify(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/keys.deleteKey"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "deleteKey"
          "source": "package main\n\nimport(\n\t\"github.com/unkeyed/sdk-go/models/components\"\n\tsdkgo \"github.com/unkeyed/sdk-go\"\n\t\"github.com/unkeyed/sdk-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := sdkgo.New(\n        sdkgo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := operations.V1KeysDeleteKeyRequestBody{\n        KeyID: \"key_1234\",\n    }\n    \n    ctx := context.Background()\n    res, err := s.V1KeysDeleteKey(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/keys.updateRemaining"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "updateRemaining"
          "source": "package main\n\nimport(\n\t\"github.com/unkeyed/sdk-go/models/components\"\n\tsdkgo \"github.com/unkeyed/sdk-go\"\n\t\"github.com/unkeyed/sdk-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := sdkgo.New(\n        sdkgo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := operations.V1KeysUpdateRemainingRequestBody{\n        KeyID: \"key_123\",\n        Op: operations.OpSet,\n        Value: sdkgo.Int64(1),\n    }\n    \n    ctx := context.Background()\n    res, err := s.V1KeysUpdateRemaining(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/apis.getApi"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "getApi"
          "source": "package main\n\nimport(\n\t\"github.com/unkeyed/sdk-go/models/components\"\n\tsdkgo \"github.com/unkeyed/sdk-go\"\n\t\"github.com/unkeyed/sdk-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := sdkgo.New(\n        sdkgo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := operations.V1ApisGetAPIRequest{\n        APIID: \"api_1234\",\n    }\n    \n    ctx := context.Background()\n    res, err := s.V1ApisGetAPI(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/apis.deleteApi"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "deleteApi"
          "source": "package main\n\nimport(\n\t\"github.com/unkeyed/sdk-go/models/components\"\n\tsdkgo \"github.com/unkeyed/sdk-go\"\n\t\"github.com/unkeyed/sdk-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := sdkgo.New(\n        sdkgo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := operations.V1ApsisDeleteAPIRequestBody{\n        APIID: \"api_1234\",\n    }\n    \n    ctx := context.Background()\n    res, err := s.V1ApsisDeleteAPI(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/keys.getKey"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "getKey"
          "source": "package main\n\nimport(\n\t\"github.com/unkeyed/sdk-go/models/components\"\n\tsdkgo \"github.com/unkeyed/sdk-go\"\n\t\"github.com/unkeyed/sdk-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := sdkgo.New(\n        sdkgo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := operations.V1KeysGetKeyRequest{\n        KeyID: \"key_1234\",\n    }\n    \n    ctx := context.Background()\n    res, err := s.V1KeysGetKey(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/keys.createKey"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "createKey"
          "source": "package main\n\nimport(\n\t\"github.com/unkeyed/sdk-go/models/components\"\n\tsdkgo \"github.com/unkeyed/sdk-go\"\n\t\"github.com/unkeyed/sdk-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := sdkgo.New(\n        sdkgo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := operations.V1KeysCreateKeyRequestBody{\n        APIID: \"api_123\",\n        Name: sdkgo.String(\"my key\"),\n        OwnerID: sdkgo.String(\"team_123\"),\n        Meta: map[string]interface{}{\n            \"billingTier\": \"PRO\",\n            \"trialEnds\": \"2023-06-16T17:16:37.161Z\",\n        },\n        Roles: []string{\n            \"admin\",\n            \"finance\",\n        },\n        Expires: sdkgo.Int64(1623869797161),\n        Remaining: sdkgo.Int64(1000),\n        Refill: &operations.Refill{\n            Interval: operations.IntervalDaily,\n            Amount: 100,\n        },\n        Ratelimit: &operations.Ratelimit{\n            Type: operations.TypeFast.ToPointer(),\n            Limit: 10,\n            RefillRate: 1,\n            RefillInterval: 60,\n        },\n        Enabled: sdkgo.Bool(false),\n    }\n    \n    ctx := context.Background()\n    res, err := s.V1KeysCreateKey(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/apis.listKeys"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "listKeys"
          "source": "package main\n\nimport(\n\t\"github.com/unkeyed/sdk-go/models/components\"\n\tsdkgo \"github.com/unkeyed/sdk-go\"\n\t\"github.com/unkeyed/sdk-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := sdkgo.New(\n        sdkgo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := operations.V1ApisListKeysRequest{\n        APIID: \"api_1234\",\n        Limit: sdkgo.Int64(100),\n    }\n    \n    ctx := context.Background()\n    res, err := s.V1ApisListKeys(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/keys"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "post_/v1/keys"
          "source": "package main\n\nimport(\n\t\"github.com/unkeyed/sdk-go/models/components\"\n\tsdkgo \"github.com/unkeyed/sdk-go\"\n\t\"github.com/unkeyed/sdk-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := sdkgo.New(\n        sdkgo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := operations.PostV1KeysRequestBody{\n        APIID: \"api_123\",\n        Name: sdkgo.String(\"my key\"),\n        OwnerID: sdkgo.String(\"team_123\"),\n        Meta: map[string]interface{}{\n            \"billingTier\": \"PRO\",\n            \"trialEnds\": \"2023-06-16T17:16:37.161Z\",\n        },\n        Expires: sdkgo.Int64(1623869797161),\n        Remaining: sdkgo.Int64(1000),\n        Ratelimit: &operations.PostV1KeysRatelimit{\n            Type: operations.PostV1KeysTypeFast.ToPointer(),\n            Limit: 10,\n            RefillRate: 1,\n            RefillInterval: 60,\n        },\n    }\n    \n    ctx := context.Background()\n    res, err := s.PostV1Keys(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/apis/{apiId}/keys"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "get_/v1/apis/{apiId}/keys"
          "source": "package main\n\nimport(\n\t\"github.com/unkeyed/sdk-go/models/components\"\n\tsdkgo \"github.com/unkeyed/sdk-go\"\n\t\"github.com/unkeyed/sdk-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := sdkgo.New(\n        sdkgo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := operations.GetV1ApisAPIIDKeysRequest{\n        APIID: \"api_1234\",\n        Limit: sdkgo.Int64(100),\n    }\n    \n    ctx := context.Background()\n    res, err := s.GetV1ApisAPIIDKeys(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/apis.createApi"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "createApi"
          "source": "package main\n\nimport(\n\t\"github.com/unkeyed/sdk-go/models/components\"\n\tsdkgo \"github.com/unkeyed/sdk-go\"\n\t\"github.com/unkeyed/sdk-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := sdkgo.New(\n        sdkgo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := operations.V1ApisCreateAPIRequestBody{\n        Name: \"my-api\",\n    }\n    \n    ctx := context.Background()\n    res, err := s.V1ApisCreateAPI(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/liveness"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "liveness"
          "source": "package main\n\nimport(\n\t\"github.com/unkeyed/sdk-go/models/components\"\n\tsdkgo \"github.com/unkeyed/sdk-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := sdkgo.New(\n        sdkgo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n\n    \n    ctx := context.Background()\n    res, err := s.V1Liveness(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
